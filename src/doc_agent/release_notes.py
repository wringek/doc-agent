"""
Release notes generator that extracts commits and uses LLM to generate structured release notes.
"""

from pathlib import Path
import json
from typing import Dict, List, Iterator
from git import Repo
import openai
from datetime import datetime
import textwrap
import os

def collect_commits(repo_path: str, rev_from: str, rev_to: str) -> Iterator[Dict]:
    """
    Collect commits between two git refs.
    
    Args:
        repo_path: Path to the git repository
        rev_from: Starting revision (e.g. v1.0.0)
        rev_to: Ending revision (e.g. HEAD)
        
    Returns:
        Iterator of commit dictionaries with sha, msg, author, and date
    """
    repo = Repo(repo_path)
    rng = f"{rev_from}..{rev_to}"
    for c in repo.iter_commits(rng):
        yield {
            "sha": c.hexsha[:7],
            "msg": c.message.split("\n")[0],  # first line only
            "author": c.author.name,
            "date": c.committed_datetime.isoformat(),
        }

SYSTEM_PROMPT = """You are ReleaseBot v0.
Group similar changes, produce crisp bullets, and rate customer impact 1-5.
Impact 1 = invisible, 5 = breaking workflow.
If impact ≥3 suggest extra tutorial or highlight.

Format your response in Markdown with the following sections:
## 🚀 Features
## 🐛 Bug Fixes
## 🔧 Maintenance
## 📚 Documentation

For each item include:
- Brief description
- Impact score (1-5)
- Tutorial/highlight suggestion if impact ≥3
"""

def generate_notes(changes: List[Dict], model: str = "gpt-4") -> str:
    """
    Generate release notes from commit changes using LLM.
    
    Args:
        changes: List of commit dictionaries
        model: OpenAI model to use
        
    Returns:
        Markdown formatted release notes
    """
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": 
            f"Here are {len(changes)} commit headers JSON:\n" +
            json.dumps(changes, indent=2)}
    ]
    
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0.2,
    )
    return response.choices[0].message.content

def format_notes(llm_reply: str, version_tag: str) -> str:
    """
    Format LLM reply into final Markdown document.
    
    Args:
        llm_reply: Raw LLM response
        version_tag: Version tag for the release
        
    Returns:
        Formatted Markdown document
    """
    return textwrap.dedent(f"""
    # Release Notes - {version_tag}

    {llm_reply}

    ---
    _Generated by doc-agent on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} by {os.environ.get('USER', '')}_
    """).strip()

def generate_release_notes(
    repo_path: str,
    rev_from: str,
    rev_to: str = "HEAD",
    output_file: str = None,
    model: str = "gpt-4"
) -> str:
    """
    Generate release notes for a git repository.
    
    Args:
        repo_path: Path to git repository
        rev_from: Starting revision
        rev_to: Ending revision (default: HEAD)
        output_file: Optional path to save output
        model: OpenAI model to use
        
    Returns:
        Generated release notes as Markdown string
    """
    # 1. Collect commits
    commits = list(collect_commits(repo_path, rev_from, rev_to))
    
    # 2. Generate notes
    llm_reply = generate_notes(commits, model)
    
    # 3. Format output
    notes = format_notes(llm_reply, rev_to)
    
    # 4. Save if requested
    if output_file:
        output_path = Path(output_file)
        output_path.write_text(notes)
        print(f"Release notes written to {output_file}")
        
    return notes 